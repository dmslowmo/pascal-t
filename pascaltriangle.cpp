#include<iostream>
#include<cstdlib>
#include<climits>
#include<unistd.h>

using std::cout;
using std::endl;

/**
This program can generate Pascal Triangle for as many rows as specified by user.
In addition, it is also possible to limit the number size generated by using modulus operand (%).
The usage:
    ./pascalTriangle arg1 arg2
    where arg1 = no. of rows -- (required),
          arg2 = the modulus value -- if '0' or no input, the default is no modulus, maximum number is UINT_MAX
*/

unsigned int* pascalTriangle(int num, int spaces, int mod);
void printSpaces(int spaces);

#define DARK_BACKGROUND 1 

const int BLACK = 0;    /* Black */
const int RED = 1;    /* Red */
const int GREEN = 2;    /* Green */
const int YELLOW = 3;   /* Yellow */
const int BLUE = 4;     /* Blue */
const int MAGENTA = 5;  /* Magenta */
const int CYAN = 6;     /* Cyan */

const unsigned int argno = 2;

int main(int argc, char* argv[]) {

#ifdef _WIN32
    std::cout << "This is Windows machine" << std::endl;
#else
#ifdef __linux__
    std::cout << "This is Linux machine" << std::endl;
#endif
#endif

    if (argc < 2) {
        std::cout << "Usage: " << argv[0] << " [no. of levels]" << " [optional: modulus]" << std::endl;
        exit(1);
    }

    int n;
    int spaces;
    int arguments[argno] = {1, UINT_MAX};
    unsigned int mod = 1;
    int p = 0;
    for(int a=0; a<argc; a++) {
        if(p == argno) {
            break;
        }
        if(atoi(argv[a]) !=0) {
            arguments[p] = atoi(argv[a]);
            p++;
        }
    }
    n = arguments[0];
    mod = arguments[1]%10;
    spaces = 1;
    pascalTriangle(n, spaces, mod);
    std::cout << std::endl;
    
    /*for (int i = 30; i <= 36; i++)
    {
        std::cout << "\033[0;" << i << "mHello!\033[0m" << std::endl;
        std::cout << "\033[1;" << i << "mHello!\033[0m" << std::endl;
    }*/
    std::cout << "\033[5;" << 30+mod%7 << "mMerry Christmas!\033[m" << std::endl << std::endl;

    return 0;
}

void printSpaces(int spaces) {
    
    for(int a=0; a<spaces; a++) {
        std::cout << " ";
    }
}

unsigned int* pascalTriangle(int num, int spaces, int mod) {

    static unsigned int* row;
#if DARK_BACKGROUND
    int offset = 1;
#else
    int offset = 0;
#endif
    
    if(num==0) {
        std::cout << "invalid argument, aborted" << std::endl;
        throw;
    }
    else if(num==1) {
        printSpaces(spaces-1);
        row = new unsigned int[1];
        row[0] = 1;
        //std::cout << row[0]%mod;
        std::cout << "\033[1;" << 30+GREEN << "m" << row[0]%mod << "\033[0m";
        return row;
    }
    else {
        unsigned int* aboverow = pascalTriangle(num-1, spaces+1, mod);
        row = new unsigned int[num];
        int i;
        std::cout << endl;
        printSpaces(spaces-1);
        for(i=0; i<num-1; i++) {
            if(i==0) {
                row[0] = 1;
                //cout << row[0]%mod;
                std::cout << "\033[1;" << 30+GREEN << "m" << row[0]%mod << "\033[0m";
            }
            else {
                unsigned int temp = (*(aboverow+(i-1)) + *(aboverow+i));
                //cout << " " << temp%mod;
                std::cout << " " << "\033[1;" << 30+(temp%mod)%7+offset << "m" << temp%mod << "\033[0m";
                row[i] = temp;
            }
        }
        row[i] = 1;
        //std::cout << " " << row[i]%mod;
        std::cout << " " << "\033[1;" << 30+GREEN << "m" << row[i]%mod << "\033[0m";
        return row;
    }
    
}
