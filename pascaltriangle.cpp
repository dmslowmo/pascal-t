/**
This program can generate Pascal Triangle for as many rows as specified by user.
In addition, it is also possible to limit the number size generated by using modulus operand (%).
The usage:
    ./pascalTriangle arg1 arg2
    where arg1 = no. of rows -- (required),
          arg2 = the modulus value -- if '0' or no input, the default is no modulus, maximum number is UINT_MAX
*/

#include <iostream>
#include <cstdlib>
#include <climits>
#include <vector>

using namespace std;

using Row = vector<int>;

Row pascalTriangle(int level, int spaces, unsigned modulus);

constexpr unsigned DarkBackground = 1;
constexpr unsigned argno = 2;

enum class ColorCode
{
	Black,
	Red,
	Green,
	Yellow,
	Blue,
	Magenta,
	Cyan,
	White
};

int main(int argc, char* argv[]) {

	if (argc < 2) {
		cout << "Usage: " << argv[0] << " [no. of levels]" << " [optional: modulus]" << endl;
		exit(1);
	}

	int spaces = 1;
	int level = atoi(argv[1]);
	unsigned modulus = UINT_MAX;
	if (argc >= 3) modulus = atoi(argv[2]);
	pascalTriangle(level, spaces, modulus);
	cout << endl;

	return 0;
}

Row pascalTriangle(int level, int spaces, unsigned modulus) {

	int offset = DarkBackground;

	if (level == 0) {
		cout << "invalid argument, aborted" << endl;
		throw;
	} else if (level == 1) {
		cout << string((spaces - 1), ' ');
		cout << "\033[1;" << 30 + static_cast<int>(ColorCode::Green) << "m" << 1 << "\033[0m" << endl;
		return Row{1};
	} else if (level == 2) {
		Row rowAbove = pascalTriangle(level - 1, spaces + 1, modulus);
		cout << string((spaces - 1), ' ');
		cout << "\033[1;" << 30 + static_cast<int>(ColorCode::Green) << "m" << 1 << " " << 1 << "\033[0m" << endl;
		return Row{1, 1};
	} else {
		Row rowAbove = pascalTriangle(level - 1, spaces + 1, modulus);
		cout << string((spaces - 1), ' ');
		Row row(1, 1);
		cout << "\033[1;" << 30 + static_cast<int>(ColorCode::Green) << "m" << row[0] % modulus << "\033[0m";
		for (int i = 1; i < level - 1; ++i) {
			unsigned int element = rowAbove[i - 1] + rowAbove[i];
			cout << " " << "\033[1;" << 30 + (element % modulus) % 7 + offset << "m" << element % modulus << "\033[0m";
			row.push_back(element);
		}
		row.push_back(1);
		cout << " " << "\033[1;" << 30 + static_cast<int>(ColorCode::Green) << "m" << row.back() % modulus << "\033[0m";
		cout << endl;
		return row;
	}

}
